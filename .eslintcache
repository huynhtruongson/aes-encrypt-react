[{"D:\\JSTest\\React\\aes-project\\src\\reportWebVitals.js":"1","D:\\JSTest\\React\\aes-project\\src\\App.js":"2","D:\\JSTest\\React\\aes-project\\src\\encrypt\\aes.ctr.js":"3","D:\\JSTest\\React\\aes-project\\src\\index.js":"4","D:\\JSTest\\React\\aes-project\\src\\encrypt\\aes.js":"5"},{"size":362,"mtime":1606309615515,"results":"6","hashOfConfig":"7"},{"size":4004,"mtime":1606484579797,"results":"8","hashOfConfig":"7"},{"size":13091,"mtime":1606314530643,"results":"9","hashOfConfig":"7"},{"size":528,"mtime":1606379220584,"results":"10","hashOfConfig":"7"},{"size":7955,"mtime":1606314380486,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17hq0uz",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"D:\\JSTest\\React\\aes-project\\src\\reportWebVitals.js",[],"D:\\JSTest\\React\\aes-project\\src\\App.js",["24"],"D:\\JSTest\\React\\aes-project\\src\\encrypt\\aes.ctr.js",["25","26","27","28","29","30","31","32","33","34"],"import Aes from './aes.js';\r\n\r\n\r\n/**\r\n * AesCtr: Counter-mode (CTR) wrapper for AES.\r\n *\r\n * This encrypts a Unicode string to produces a base64 ciphertext using 128/192/256-bit AES,\r\n * and the converse to decrypt an encrypted ciphertext.\r\n *\r\n * See csrc.nist.gov/publications/detail/sp/800-38a/final\r\n */\r\nclass AesCtr extends Aes {\r\n\r\n    /**\r\n     * Encrypt a text using AES encryption in Counter mode of operation.\r\n     *\r\n     * Unicode multi-byte character safe.\r\n     *\r\n     * @param   {string} plaintext - Source text to be encrypted.\r\n     * @param   {string} password - The password to use to generate a key for encryption.\r\n     * @param   {number} nBits - Number of bits to be used in the key; 128 / 192 / 256.\r\n     * @returns {string} Encrypted text, base-64 encoded.\r\n     *\r\n     * @example\r\n     *   const encr = AesCtr.encrypt('big secret', 'pāşšŵōřđ', 256); // 'lwGl66VVwVObKIr6of8HVqJr'\r\n     */\r\n    static encrypt(plaintext, password, nBits) {\r\n        if (![ 128, 192, 256 ].includes(nBits)) throw new Error('Key size is not 128 / 192 / 256');\r\n        plaintext = AesCtr.utf8Encode(String(plaintext));\r\n        password = AesCtr.utf8Encode(String(password));\r\n\r\n        // use AES itself to encrypt password to get cipher key (using plain password as source for key\r\n        // expansion) to give us well encrypted key (in real use hashed password could be used for key)\r\n        const nBytes = nBits/8; // no bytes in key (16/24/32)\r\n        const pwBytes = new Array(nBytes);\r\n        for (let i=0; i<nBytes; i++) { // use 1st 16/24/32 chars of password for key\r\n            pwBytes[i] = i<password.length ?  password.charCodeAt(i) : 0;\r\n        }\r\n        let key = Aes.cipher(pwBytes, Aes.keyExpansion(pwBytes)); // gives us 16-byte key\r\n        key = key.concat(key.slice(0, nBytes-16)); // expand key to 16/24/32 bytes long\r\n\r\n        // initialise 1st 8 bytes of counter block with nonce (NIST SP 800-38A §B.2): [0-1] = millisec,\r\n        // [2-3] = random, [4-7] = seconds, together giving full sub-millisec uniqueness up to Feb 2106\r\n        const timestamp = (new Date()).getTime(); // milliseconds since 1-Jan-1970\r\n        const nonceMs = timestamp%1000;\r\n        const nonceSec = Math.floor(timestamp/1000);\r\n        const nonceRnd = Math.floor(Math.random()*0xffff);\r\n        // for debugging: const [ nonceMs, nonceSec, nonceRnd ] = [ 0, 0, 0 ];\r\n        const counterBlock = [ // 16-byte array; blocksize is fixed at 16 for AES\r\n            nonceMs  & 0xff, nonceMs >>>8 & 0xff,\r\n            nonceRnd & 0xff, nonceRnd>>>8 & 0xff,\r\n            nonceSec & 0xff, nonceSec>>>8 & 0xff, nonceSec>>>16 & 0xff, nonceSec>>>24 & 0xff,\r\n            0, 0, 0, 0, 0, 0, 0, 0,\r\n        ];\r\n\r\n        // and convert nonce to a string to go on the front of the ciphertext\r\n        const nonceStr = counterBlock.slice(0, 8).map(i => String.fromCharCode(i)).join('');\r\n\r\n        // convert (utf-8) plaintext to byte array\r\n        const plaintextBytes = plaintext.split('').map(ch => ch.charCodeAt(0));\r\n\r\n        // ------------ perform encryption ------------\r\n        const ciphertextBytes = AesCtr.nistEncryption(plaintextBytes, key, counterBlock);\r\n\r\n        // convert byte array to (utf-8) ciphertext string\r\n        const ciphertextUtf8 = ciphertextBytes.map(i => String.fromCharCode(i)).join('');\r\n\r\n        // base-64 encode ciphertext\r\n        const ciphertextB64 =  AesCtr.base64Encode(nonceStr+ciphertextUtf8);\r\n\r\n        return ciphertextB64;\r\n    }\r\n\r\n    /**\r\n     * NIST SP 800-38A sets out recommendations for block cipher modes of operation in terms of byte\r\n     * operations. This implements the §6.5 Counter Mode (CTR).\r\n     *\r\n     *     Oⱼ = CIPHₖ(Tⱼ)      for j = 1, 2 … n\r\n     *     Cⱼ = Pⱼ ⊕ Oⱼ        for j = 1, 2 … n-1\r\n     *     C*ₙ = P* ⊕ MSBᵤ(Oₙ) final (partial?) block\r\n     *   where CIPHₖ is the forward cipher function, O output blocks, P plaintext blocks, C\r\n     *   ciphertext blocks\r\n     *\r\n     * @param   {number[]} plaintext - Plaintext to be encrypted, as byte array.\r\n     * @param   {number[]} key - Key to be used to encrypt plaintext.\r\n     * @param   {number[]} counterBlock - Initial 16-byte CTR counter block (with nonce & 0 counter).\r\n     * @returns {number[]} Ciphertext as byte array.\r\n     *\r\n     * @private\r\n     */\r\n    static nistEncryption(plaintext, key, counterBlock) {\r\n        const blockSize = 16; // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\r\n\r\n        // generate key schedule - an expansion of the key into distinct Key Rounds for each round\r\n        const keySchedule = Aes.keyExpansion(key);\r\n\r\n        const blockCount = Math.ceil(plaintext.length/blockSize);\r\n        const ciphertext = new Array(plaintext.length);\r\n\r\n        for (let b=0; b<blockCount; b++) {\r\n            // ---- encrypt counter block; Oⱼ = CIPHₖ(Tⱼ) ----\r\n            const cipherCntr = Aes.cipher(counterBlock, keySchedule);\r\n\r\n            // block size is reduced on final block\r\n            const blockLength = b<blockCount-1 ? blockSize : (plaintext.length-1)%blockSize + 1;\r\n\r\n            // ---- xor plaintext with ciphered counter byte-by-byte; Cⱼ = Pⱼ ⊕ Oⱼ ----\r\n            for (let i=0; i<blockLength; i++) {\r\n                ciphertext[b*blockSize + i] = cipherCntr[i] ^ plaintext[b*blockSize + i];\r\n            }\r\n\r\n            // increment counter block (counter in 2nd 8 bytes of counter block, big-endian)\r\n            counterBlock[blockSize-1]++;\r\n            // and propagate carry digits\r\n            for (let i=blockSize-1; i>=8; i--) {\r\n                counterBlock[i-1] += counterBlock[i] >> 8;\r\n                counterBlock[i] &= 0xff;\r\n            }\r\n\r\n            // if within web worker, announce progress every 1000 blocks (roughly every 50ms)\r\n            // if (typeof WorkerGlobalScope != 'undefined' && self instanceof WorkerGlobalScope) {\r\n            //     if (b%1000 == 0) self.postMessage({ progress: b/blockCount });\r\n            // }\r\n        }\r\n\r\n        return ciphertext;\r\n    }\r\n\r\n\r\n    /**\r\n     * Decrypt a text encrypted by AES in counter mode of operation.\r\n     *\r\n     * @param   {string} ciphertext - Cipher text to be decrypted.\r\n     * @param   {string} password - Password to use to generate a key for decryption.\r\n     * @param   {number} nBits - Number of bits to be used in the key; 128 / 192 / 256.\r\n     * @returns {string} Decrypted text\r\n     *\r\n     * @example\r\n     *   const decr = AesCtr.decrypt('lwGl66VVwVObKIr6of8HVqJr', 'pāşšŵōřđ', 256); // 'big secret'\r\n     */\r\n    static decrypt(ciphertext, password, nBits) {\r\n        if (![ 128, 192, 256 ].includes(nBits)) throw new Error('Key size is not 128 / 192 / 256');\r\n        ciphertext = AesCtr.base64Decode(String(ciphertext));\r\n        password = AesCtr.utf8Encode(String(password));\r\n\r\n        // use AES to encrypt password (mirroring encrypt routine)\r\n        const nBytes = nBits/8; // no bytes in key\r\n        const pwBytes = new Array(nBytes);\r\n        for (let i=0; i<nBytes; i++) { // use 1st nBytes chars of password for key\r\n            pwBytes[i] = i<password.length ?  password.charCodeAt(i) : 0;\r\n        }\r\n        let key = Aes.cipher(pwBytes, Aes.keyExpansion(pwBytes));\r\n        key = key.concat(key.slice(0, nBytes-16)); // expand key to 16/24/32 bytes long\r\n\r\n        // recover nonce from 1st 8 bytes of ciphertext into 1st 8 bytes of counter block\r\n        const counterBlock = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\r\n        for (let i=0; i<8; i++) counterBlock[i] = ciphertext.charCodeAt(i);\r\n\r\n        // convert ciphertext to byte array (skipping past initial 8 bytes)\r\n        const ciphertextBytes = new Array(ciphertext.length-8);\r\n        for (let i=8; i<ciphertext.length; i++) ciphertextBytes[i-8] = ciphertext.charCodeAt(i);\r\n\r\n        // ------------ perform decryption ------------\r\n        const plaintextBytes = AesCtr.nistDecryption(ciphertextBytes, key, counterBlock);\r\n\r\n        // convert byte array to (utf-8) plaintext string\r\n        const plaintextUtf8 = plaintextBytes.map(i => String.fromCharCode(i)).join('');\r\n\r\n        // decode from UTF8 back to Unicode multi-byte chars\r\n        const plaintext = AesCtr.utf8Decode(plaintextUtf8);\r\n\r\n        return plaintext;\r\n    }\r\n\r\n    /**\r\n     * NIST SP 800-38A sets out recommendations for block cipher modes of operation in terms of byte\r\n     * operations. This implements the §6.5 Counter Mode (CTR).\r\n     *\r\n     *     Oⱼ = CIPHₖ(Tⱼ)      for j = 1, 2 … n\r\n     *     Pⱼ = Cⱼ ⊕ Oⱼ        for j = 1, 2 … n-1\r\n     *     P*ₙ = C* ⊕ MSBᵤ(Oₙ) final (partial?) block\r\n     *   where CIPHₖ is the forward cipher function, O output blocks, C ciphertext blocks, P\r\n     *   plaintext blocks\r\n     *\r\n     * @param   {number[]} ciphertext - Ciphertext to be decrypted, as byte array.\r\n     * @param   {number[]} key - Key to be used to decrypt ciphertext.\r\n     * @param   {number[]} counterBlock - Initial 16-byte CTR counter block (with nonce & 0 counter).\r\n     * @returns {number[]} Plaintext as byte array.\r\n     *\r\n     * @private\r\n     */\r\n    static nistDecryption(ciphertext, key, counterBlock) {\r\n        const blockSize = 16; // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\r\n\r\n        // generate key schedule - an expansion of the key into distinct Key Rounds for each round\r\n        const keySchedule = Aes.keyExpansion(key);\r\n\r\n        const blockCount = Math.ceil(ciphertext.length/blockSize);\r\n        const plaintext = new Array(ciphertext.length);\r\n\r\n        for (let b=0; b<blockCount; b++) {\r\n            // ---- decrypt counter block; Oⱼ = CIPHₖ(Tⱼ) ----\r\n            const cipherCntr = Aes.cipher(counterBlock, keySchedule);\r\n\r\n            // block size is reduced on final block\r\n            const blockLength = b<blockCount-1 ? blockSize : (ciphertext.length-1)%blockSize + 1;\r\n\r\n            // ---- xor ciphertext with ciphered counter byte-by-byte; Pⱼ = Cⱼ ⊕ Oⱼ ----\r\n            for (let i=0; i<blockLength; i++) {\r\n                plaintext[b*blockSize + i] = cipherCntr[i] ^ ciphertext[b*blockSize + i];\r\n            }\r\n\r\n            // increment counter block (counter in 2nd 8 bytes of counter block, big-endian)\r\n            counterBlock[blockSize-1]++;\r\n            // and propagate carry digits\r\n            for (let i=blockSize-1; i>=8; i--) {\r\n                counterBlock[i-1] += counterBlock[i] >> 8;\r\n                counterBlock[i] &= 0xff;\r\n            }\r\n\r\n            // if within web worker, announce progress every 1000 blocks (roughly every 50ms)\r\n            // if (typeof WorkerGlobalScope != 'undefined' && self instanceof WorkerGlobalScope) {\r\n            //     if (b%1000 == 0) self.postMessage({ progress: b/blockCount });\r\n            // }\r\n        }\r\n\r\n        return plaintext;\r\n    }\r\n\r\n\r\n    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\r\n\r\n\r\n    /**\r\n     * Encodes multi-byte string to utf8.\r\n     *\r\n     * Note utf8Encode is an identity function with 7-bit ascii strings, but not with 8-bit strings;\r\n     * utf8Encode('x') = 'x', but utf8Encode('ça') = 'Ã§a', and utf8Encode('Ã§a') = 'ÃÂ§a'.\r\n     */\r\n    static utf8Encode(str) {\r\n        try {\r\n            return new TextEncoder().encode(str, 'utf-8').reduce((prev, curr) => prev + String.fromCharCode(curr), '');\r\n        } catch (e) { // no TextEncoder available?\r\n            return unescape(encodeURIComponent(str)); // monsur.hossa.in/2012/07/20/utf-8-in-javascript.html\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decodes utf8 string to multi-byte.\r\n     */\r\n    static utf8Decode(str) {\r\n        try {\r\n            return new TextEncoder().decode(str, 'utf-8').reduce((prev, curr) => prev + String.fromCharCode(curr), '');\r\n        } catch (e) { // no TextEncoder available?\r\n            return decodeURIComponent(escape(str)); // monsur.hossa.in/2012/07/20/utf-8-in-javascript.html\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Encodes string as base-64.\r\n     *\r\n     * - developer.mozilla.org/en-US/docs/Web/API/window.btoa, nodejs.org/api/buffer.html\r\n     * - note: btoa & Buffer/binary work on single-byte Unicode (C0/C1), so ok for utf8 strings, not for general Unicode...\r\n     * - note: if btoa()/atob() are not available (eg IE9-), try github.com/davidchambers/Base64.js\r\n     */\r\n    static base64Encode(str) {\r\n        if (typeof btoa != 'undefined') return btoa(str); // browser\r\n        if (typeof Buffer != 'undefined') return new Buffer(str, 'binary').toString('base64'); // Node.js\r\n        throw new Error('No Base64 Encode');\r\n    }\r\n\r\n    /*\r\n     * Decodes base-64 encoded string.\r\n     */\r\n    static base64Decode(str) {\r\n        if (typeof atob != 'undefined') return atob(str); // browser\r\n        if (typeof Buffer != 'undefined') return new Buffer(str, 'base64').toString('binary'); // Node.js\r\n        throw new Error('No Base64 Decode');\r\n    }\r\n\r\n}\r\n\r\n\r\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\r\n\r\nexport default AesCtr;","D:\\JSTest\\React\\aes-project\\src\\index.js",[],"D:\\JSTest\\React\\aes-project\\src\\encrypt\\aes.js",["35","36","37","38"],"class Aes {\r\n\r\n    /**\r\n     * AES Cipher function: encrypt 'input' state with Rijndael algorithm [§5.1];\r\n     *   applies Nr rounds (10/12/14) using key schedule w for 'add round key' stage.\r\n     *\r\n     * @param   {number[]}   input - 16-byte (128-bit) input state array.\r\n     * @param   {number[][]} w - Key schedule as 2D byte-array (Nr+1 × Nb bytes).\r\n     * @returns {number[]}   Encrypted output state array.\r\n     */\r\n    static cipher(input, w) {\r\n        const Nb = 4;               // block size (in words): no of columns in state (fixed at 4 for AES)\r\n        const Nr = w.length/Nb - 1; // no of rounds: 10/12/14 for 128/192/256-bit keys\r\n\r\n        let state = [ [], [], [], [] ];  // initialise 4×Nb byte-array 'state' with input [§3.4]\r\n        for (let i=0; i<4*Nb; i++) state[i%4][Math.floor(i/4)] = input[i];\r\n\r\n        state = Aes.addRoundKey(state, w, 0, Nb);\r\n\r\n        for (let round=1; round<Nr; round++) {\r\n            state = Aes.subBytes(state, Nb);\r\n            state = Aes.shiftRows(state, Nb);\r\n            state = Aes.mixColumns(state, Nb);\r\n            state = Aes.addRoundKey(state, w, round, Nb);\r\n        }\r\n\r\n        state = Aes.subBytes(state, Nb);\r\n        state = Aes.shiftRows(state, Nb);\r\n        state = Aes.addRoundKey(state, w, Nr, Nb);\r\n\r\n        const output = new Array(4*Nb);  // convert state to 1-d array before returning [§3.4]\r\n        for (let i=0; i<4*Nb; i++) output[i] = state[i%4][Math.floor(i/4)];\r\n\r\n        return output;\r\n    }\r\n\r\n\r\n    /**\r\n     * Perform key expansion to generate a key schedule from a cipher key [§5.2].\r\n     *\r\n     * @param   {number[]}   key - Cipher key as 16/24/32-byte array.\r\n     * @returns {number[][]} Expanded key schedule as 2D byte-array (Nr+1 × Nb bytes).\r\n     */\r\n    static keyExpansion(key) {\r\n        const Nb = 4;            // block size (in words): no of columns in state (fixed at 4 for AES)\r\n        const Nk = key.length/4; // key length (in words): 4/6/8 for 128/192/256-bit keys\r\n        const Nr = Nk + 6;       // no of rounds: 10/12/14 for 128/192/256-bit keys\r\n\r\n        const w = new Array(Nb*(Nr+1));\r\n        let temp = new Array(4);\r\n\r\n        // initialise first Nk words of expanded key with cipher key\r\n        for (let i=0; i<Nk; i++) {\r\n            const r = [ key[4*i], key[4*i+1], key[4*i+2], key[4*i+3] ];\r\n            w[i] = r;\r\n        }\r\n\r\n        // expand the key into the remainder of the schedule\r\n        for (let i=Nk; i<(Nb*(Nr+1)); i++) {\r\n            w[i] = new Array(4);\r\n            for (let t=0; t<4; t++) temp[t] = w[i-1][t];\r\n            // each Nk'th word has extra transformation\r\n            if (i % Nk == 0) {\r\n                temp = Aes.subWord(Aes.rotWord(temp));\r\n                for (let t=0; t<4; t++) temp[t] ^= Aes.rCon[i/Nk][t];\r\n            }\r\n            // 256-bit key has subWord applied every 4th word\r\n            else if (Nk > 6 && i%Nk == 4) {\r\n                temp = Aes.subWord(temp);\r\n            }\r\n            // xor w[i] with w[i-1] and w[i-Nk]\r\n            for (let t=0; t<4; t++) w[i][t] = w[i-Nk][t] ^ temp[t];\r\n        }\r\n\r\n        return w;\r\n    }\r\n\r\n\r\n    /**\r\n     * Apply SBox to state S [§5.1.1].\r\n     *\r\n     * @private\r\n     */\r\n    static subBytes(s, Nb) {\r\n        for (let r=0; r<4; r++) {\r\n            for (let c=0; c<Nb; c++) s[r][c] = Aes.sBox[s[r][c]];\r\n        }\r\n        return s;\r\n    }\r\n\r\n\r\n    /**\r\n     * Shift row r of state S left by r bytes [§5.1.2].\r\n     *\r\n     * @private\r\n     */\r\n    static shiftRows(s, Nb) {\r\n        const t = new Array(4);\r\n        for (let r=1; r<4; r++) {\r\n            for (let c=0; c<4; c++) t[c] = s[r][(c+r)%Nb];  // shift into temp copy\r\n            for (let c=0; c<4; c++) s[r][c] = t[c];         // and copy back\r\n        }          // note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):\r\n        return s;  // see asmaes.sourceforge.net/rijndael/rijndaelImplementation.pdf\r\n    }\r\n\r\n\r\n    /**\r\n     * Combine bytes of each col of state S [§5.1.3].\r\n     *\r\n     * @private\r\n     */\r\n    static mixColumns(s, Nb) {\r\n        for (let c=0; c<Nb; c++) {\r\n            const a = new Array(Nb);  // 'a' is a copy of the current column from 's'\r\n            const b = new Array(Nb);  // 'b' is a•{02} in GF(2^8)\r\n            for (let r=0; r<4; r++) {\r\n                a[r] = s[r][c];\r\n                b[r] = s[r][c]&0x80 ? s[r][c]<<1 ^ 0x011b : s[r][c]<<1;\r\n            }\r\n            // a[n] ^ b[n] is a•{03} in GF(2^8)\r\n            s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]; // {02}•a0 + {03}•a1 + a2 + a3\r\n            s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]; // a0 • {02}•a1 + {03}•a2 + a3\r\n            s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]; // a0 + a1 + {02}•a2 + {03}•a3\r\n            s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]; // {03}•a0 + a1 + a2 + {02}•a3\r\n        }\r\n        return s;\r\n    }\r\n\r\n\r\n    /**\r\n     * Xor Round Key into state S [§5.1.4].\r\n     *\r\n     * @private\r\n     */\r\n    static addRoundKey(state, w, rnd, Nb) {\r\n        for (let r=0; r<4; r++) {\r\n            for (let c=0; c<Nb; c++) state[r][c] ^= w[rnd*4+c][r];\r\n        }\r\n        return state;\r\n    }\r\n\r\n\r\n    /**\r\n     * Apply SBox to 4-byte word w.\r\n     *\r\n     * @private\r\n     */\r\n    static subWord(w) {\r\n        for (let i=0; i<4; i++) w[i] = Aes.sBox[w[i]];\r\n        return w;\r\n    }\r\n\r\n\r\n    /**\r\n     * Rotate 4-byte word w left by one byte.\r\n     *\r\n     * @private\r\n     */\r\n    static rotWord(w) {\r\n        const tmp = w[0];\r\n        for (let i=0; i<3; i++) w[i] = w[i+1];\r\n        w[3] = tmp;\r\n        return w;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// sBox is pre-computed multiplicative inverse in GF(2^8) used in subBytes and keyExpansion [§5.1.1]\r\nAes.sBox = [\r\n    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\r\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\r\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\r\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\r\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\r\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\r\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\r\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\r\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\r\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\r\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\r\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\r\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\r\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\r\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\r\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,\r\n];\r\n\r\n\r\n// rCon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [§5.2]\r\nAes.rCon = [\r\n    [ 0x00, 0x00, 0x00, 0x00 ],\r\n    [ 0x01, 0x00, 0x00, 0x00 ],\r\n    [ 0x02, 0x00, 0x00, 0x00 ],\r\n    [ 0x04, 0x00, 0x00, 0x00 ],\r\n    [ 0x08, 0x00, 0x00, 0x00 ],\r\n    [ 0x10, 0x00, 0x00, 0x00 ],\r\n    [ 0x20, 0x00, 0x00, 0x00 ],\r\n    [ 0x40, 0x00, 0x00, 0x00 ],\r\n    [ 0x80, 0x00, 0x00, 0x00 ],\r\n    [ 0x1b, 0x00, 0x00, 0x00 ],\r\n    [ 0x36, 0x00, 0x00, 0x00 ],\r\n];\r\n\r\n\r\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\r\n\r\nexport default Aes;",{"ruleId":"39","severity":1,"message":"40","line":1,"column":10,"nodeType":"41","messageId":"42","endLine":1,"endColumn":19},{"ruleId":"43","severity":1,"message":"44","line":50,"column":38,"nodeType":"45","messageId":"46","endLine":50,"endColumn":41},{"ruleId":"43","severity":1,"message":"44","line":50,"column":43,"nodeType":"45","messageId":"46","endLine":50,"endColumn":44},{"ruleId":"43","severity":1,"message":"44","line":51,"column":38,"nodeType":"45","messageId":"46","endLine":51,"endColumn":41},{"ruleId":"43","severity":1,"message":"44","line":51,"column":43,"nodeType":"45","messageId":"46","endLine":51,"endColumn":44},{"ruleId":"43","severity":1,"message":"44","line":52,"column":38,"nodeType":"45","messageId":"46","endLine":52,"endColumn":41},{"ruleId":"43","severity":1,"message":"44","line":52,"column":43,"nodeType":"45","messageId":"46","endLine":52,"endColumn":44},{"ruleId":"43","severity":1,"message":"44","line":52,"column":59,"nodeType":"45","messageId":"46","endLine":52,"endColumn":62},{"ruleId":"43","severity":1,"message":"44","line":52,"column":65,"nodeType":"45","messageId":"46","endLine":52,"endColumn":66},{"ruleId":"43","severity":1,"message":"44","line":52,"column":81,"nodeType":"45","messageId":"46","endLine":52,"endColumn":84},{"ruleId":"43","severity":1,"message":"44","line":52,"column":87,"nodeType":"45","messageId":"46","endLine":52,"endColumn":88},{"ruleId":"47","severity":1,"message":"48","line":63,"column":24,"nodeType":"45","messageId":"49","endLine":63,"endColumn":26},{"ruleId":"47","severity":1,"message":"48","line":68,"column":37,"nodeType":"45","messageId":"49","endLine":68,"endColumn":39},{"ruleId":"43","severity":1,"message":"50","line":118,"column":46,"nodeType":"45","messageId":"46","endLine":118,"endColumn":48},{"ruleId":"43","severity":1,"message":"50","line":118,"column":50,"nodeType":"45","messageId":"46","endLine":118,"endColumn":51},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '>>>' and '&'.","BinaryExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","unexpected","Unexpected mix of '<<' and '^'."]